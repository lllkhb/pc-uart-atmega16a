
L5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000003aa  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000007e  00800060  000003aa  0000043e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000004c  008000de  008000de  000004bc  2**0
                  ALLOC
  3 .stab         000009d8  00000000  00000000  000004bc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000001db  00000000  00000000  00000e94  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000020  00000000  00000000  0000106f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000011a  00000000  00000000  0000108f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000002bc  00000000  00000000  000011a9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000148  00000000  00000000  00001465  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000003ed  00000000  00000000  000015ad  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000000d0  00000000  00000000  0000199c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000136  00000000  00000000  00001a6c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000008b  00000000  00000000  00001ba2  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 0000002b  00000000  00000000  00001c2d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 81 00 	jmp	0x102	; 0x102 <__vector_1>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea ea       	ldi	r30, 0xAA	; 170
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ae 3d       	cpi	r26, 0xDE	; 222
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	11 e0       	ldi	r17, 0x01	; 1
  78:	ae ed       	ldi	r26, 0xDE	; 222
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	aa 32       	cpi	r26, 0x2A	; 42
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 77 01 	call	0x2ee	; 0x2ee <main>
  8a:	0c 94 d3 01 	jmp	0x3a6	; 0x3a6 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <UART_Init>:
unsigned char buf[8];
unsigned char bufRX[bufRX_SIZE] = {0};
unsigned char bufTMP[bufTMP_SIZE] = {0};

void UART_Init(void) {
    UBRRL = UBRR_value;
  92:	8c e0       	ldi	r24, 0x0C	; 12
  94:	89 b9       	out	0x09, r24	; 9
    UBRRH = (UBRR_value >> 8);
  96:	10 bc       	out	0x20, r1	; 32
    UCSRB = (1 << TXEN) | (1 << RXEN);
  98:	88 e1       	ldi	r24, 0x18	; 24
  9a:	8a b9       	out	0x0a, r24	; 10
    UCSRC = (1 << URSEL) | (1 << UCSZ1) | (1 << UCSZ0);
  9c:	86 e8       	ldi	r24, 0x86	; 134
  9e:	80 bd       	out	0x20, r24	; 32
}
  a0:	08 95       	ret

000000a2 <UART_send>:

void UART_send(unsigned char value) {
    while (!(UCSRA & (1 << UDRE)));
  a2:	5d 9b       	sbis	0x0b, 5	; 11
  a4:	fe cf       	rjmp	.-4      	; 0xa2 <UART_send>
    UDR = value;
  a6:	8c b9       	out	0x0c, r24	; 12
}
  a8:	08 95       	ret

000000aa <UART_send_str>:

void UART_send_str(unsigned char *str) {
  aa:	cf 93       	push	r28
  ac:	df 93       	push	r29
  ae:	ec 01       	movw	r28, r24
    while (*str != '\0') {
  b0:	88 81       	ld	r24, Y
  b2:	88 23       	and	r24, r24
  b4:	31 f0       	breq	.+12     	; 0xc2 <UART_send_str+0x18>
void UART_send(unsigned char value) {
    while (!(UCSRA & (1 << UDRE)));
    UDR = value;
}

void UART_send_str(unsigned char *str) {
  b6:	21 96       	adiw	r28, 0x01	; 1
    while (*str != '\0') {
        UART_send(*str++);
  b8:	0e 94 51 00 	call	0xa2	; 0xa2 <UART_send>
    while (!(UCSRA & (1 << UDRE)));
    UDR = value;
}

void UART_send_str(unsigned char *str) {
    while (*str != '\0') {
  bc:	89 91       	ld	r24, Y+
  be:	88 23       	and	r24, r24
  c0:	d9 f7       	brne	.-10     	; 0xb8 <UART_send_str+0xe>
        UART_send(*str++);
    }
}
  c2:	df 91       	pop	r29
  c4:	cf 91       	pop	r28
  c6:	08 95       	ret

000000c8 <UART_receive>:

unsigned char UART_receive(void) {
    while (!(UCSRA & (1 << RXC))) {}
  c8:	5f 9b       	sbis	0x0b, 7	; 11
  ca:	fe cf       	rjmp	.-4      	; 0xc8 <UART_receive>
    return UDR;
  cc:	8c b1       	in	r24, 0x0c	; 12
}
  ce:	08 95       	ret

000000d0 <adc_init>:

void adc_init() {
    ADMUX |= (1 << REFS0);    // AREF = AVcc
  d0:	3e 9a       	sbi	0x07, 6	; 7
    ADCSRA |= (1 << ADEN);    // ADC enable
  d2:	37 9a       	sbi	0x06, 7	; 6
}
  d4:	08 95       	ret

000000d6 <timer0_init_ctc>:

void timer0_init_ctc() {
    TCCR0 |= (1 << WGM01);    // CTC mode
  d6:	83 b7       	in	r24, 0x33	; 51
  d8:	88 60       	ori	r24, 0x08	; 8
  da:	83 bf       	out	0x33, r24	; 51
    TCCR0 |= (1 << CS02);     // prescaler 256
  dc:	83 b7       	in	r24, 0x33	; 51
  de:	84 60       	ori	r24, 0x04	; 4
  e0:	83 bf       	out	0x33, r24	; 51
    OCR0 = 12;                // 80 Hz (не використовується тут)
  e2:	8c e0       	ldi	r24, 0x0C	; 12
  e4:	8c bf       	out	0x3c, r24	; 60
    TIMSK |= (1 << OCIE0);    // interrupt enable (опціонально)
  e6:	89 b7       	in	r24, 0x39	; 57
  e8:	82 60       	ori	r24, 0x02	; 2
  ea:	89 bf       	out	0x39, r24	; 57
}
  ec:	08 95       	ret

000000ee <ext_int0_init>:

void ext_int0_init() {
    GICR |= (1 << INT0);      // enable INT0
  ee:	8b b7       	in	r24, 0x3b	; 59
  f0:	80 64       	ori	r24, 0x40	; 64
  f2:	8b bf       	out	0x3b, r24	; 59
    MCUCR |= (1 << ISC01);    // falling edge
  f4:	85 b7       	in	r24, 0x35	; 53
  f6:	82 60       	ori	r24, 0x02	; 2
  f8:	85 bf       	out	0x35, r24	; 53
    MCUCR &= ~(1 << ISC00);
  fa:	85 b7       	in	r24, 0x35	; 53
  fc:	8e 7f       	andi	r24, 0xFE	; 254
  fe:	85 bf       	out	0x35, r24	; 53
}
 100:	08 95       	ret

00000102 <__vector_1>:

ISR(INT0_vect) {
 102:	1f 92       	push	r1
 104:	0f 92       	push	r0
 106:	0f b6       	in	r0, 0x3f	; 63
 108:	0f 92       	push	r0
 10a:	11 24       	eor	r1, r1
 10c:	8f 93       	push	r24
    flag_measure = 1;
 10e:	81 e0       	ldi	r24, 0x01	; 1
 110:	80 93 df 00 	sts	0x00DF, r24
}
 114:	8f 91       	pop	r24
 116:	0f 90       	pop	r0
 118:	0f be       	out	0x3f, r0	; 63
 11a:	0f 90       	pop	r0
 11c:	1f 90       	pop	r1
 11e:	18 95       	reti

00000120 <process_adc>:

void process_adc(void) {
 120:	cf 93       	push	r28
 122:	df 93       	push	r29
    if (flag_measure && mode != MODE_OFF) {
 124:	80 91 df 00 	lds	r24, 0x00DF
 128:	88 23       	and	r24, r24
 12a:	99 f1       	breq	.+102    	; 0x192 <process_adc+0x72>
 12c:	80 91 de 00 	lds	r24, 0x00DE
 130:	88 23       	and	r24, r24
 132:	79 f1       	breq	.+94     	; 0x192 <process_adc+0x72>
        flag_measure = 0;
 134:	10 92 df 00 	sts	0x00DF, r1

        ADCSRA |= (1 << ADSC);
 138:	36 9a       	sbi	0x06, 6	; 6
        while (ADCSRA & (1 << ADSC));
 13a:	36 99       	sbic	0x06, 6	; 6
 13c:	fe cf       	rjmp	.-4      	; 0x13a <process_adc+0x1a>
        adc_result = ADC;
 13e:	84 b1       	in	r24, 0x04	; 4
 140:	95 b1       	in	r25, 0x05	; 5
 142:	90 93 e1 00 	sts	0x00E1, r25
 146:	80 93 e0 00 	sts	0x00E0, r24

        if ((mode == MODE_LOW && adc_result < 500) ||
 14a:	20 91 de 00 	lds	r18, 0x00DE
 14e:	21 30       	cpi	r18, 0x01	; 1
 150:	29 f4       	brne	.+10     	; 0x15c <process_adc+0x3c>
 152:	21 e0       	ldi	r18, 0x01	; 1
 154:	84 3f       	cpi	r24, 0xF4	; 244
 156:	92 07       	cpc	r25, r18
 158:	54 f0       	brlt	.+20     	; 0x16e <process_adc+0x4e>
 15a:	1b c0       	rjmp	.+54     	; 0x192 <process_adc+0x72>
 15c:	22 30       	cpi	r18, 0x02	; 2
 15e:	29 f4       	brne	.+10     	; 0x16a <process_adc+0x4a>
            (mode == MODE_HIGH && adc_result >= 500) ||
 160:	21 e0       	ldi	r18, 0x01	; 1
 162:	84 3f       	cpi	r24, 0xF4	; 244
 164:	92 07       	cpc	r25, r18
 166:	1c f4       	brge	.+6      	; 0x16e <process_adc+0x4e>
 168:	14 c0       	rjmp	.+40     	; 0x192 <process_adc+0x72>
 16a:	23 30       	cpi	r18, 0x03	; 3
 16c:	91 f4       	brne	.+36     	; 0x192 <process_adc+0x72>
            (mode == MODE_ALL)) {

            itoa(adc_result, buf, 10);
 16e:	c2 e2       	ldi	r28, 0x22	; 34
 170:	d1 e0       	ldi	r29, 0x01	; 1
 172:	be 01       	movw	r22, r28
 174:	4a e0       	ldi	r20, 0x0A	; 10
 176:	50 e0       	ldi	r21, 0x00	; 0
 178:	0e 94 8e 01 	call	0x31c	; 0x31c <itoa>
            UART_send_str("ADC = ");
 17c:	80 e6       	ldi	r24, 0x60	; 96
 17e:	90 e0       	ldi	r25, 0x00	; 0
 180:	0e 94 55 00 	call	0xaa	; 0xaa <UART_send_str>
            UART_send_str(buf);
 184:	ce 01       	movw	r24, r28
 186:	0e 94 55 00 	call	0xaa	; 0xaa <UART_send_str>
            UART_send_str("\r\n");
 18a:	87 e6       	ldi	r24, 0x67	; 103
 18c:	90 e0       	ldi	r25, 0x00	; 0
 18e:	0e 94 55 00 	call	0xaa	; 0xaa <UART_send_str>
        }
    }
}
 192:	df 91       	pop	r29
 194:	cf 91       	pop	r28
 196:	08 95       	ret

00000198 <UART_receive_cmd>:

int UART_receive_cmd(void) {
 198:	ef 92       	push	r14
 19a:	ff 92       	push	r15
 19c:	0f 93       	push	r16
 19e:	1f 93       	push	r17
 1a0:	cf 93       	push	r28
 1a2:	df 93       	push	r29
    int cnt = 0;
 1a4:	02 ee       	ldi	r16, 0xE2	; 226
 1a6:	10 e0       	ldi	r17, 0x00	; 0
 1a8:	c0 e0       	ldi	r28, 0x00	; 0
 1aa:	d0 e0       	ldi	r29, 0x00	; 0
    unsigned char rxbyte;
    do {
        rxbyte = UART_receive();
 1ac:	0e 94 64 00 	call	0xc8	; 0xc8 <UART_receive>
        bufRX[cnt++] = rxbyte;
 1b0:	f8 01       	movw	r30, r16
 1b2:	81 93       	st	Z+, r24
 1b4:	8f 01       	movw	r16, r30
 1b6:	21 96       	adiw	r28, 0x01	; 1
    } while (rxbyte != '\n' && cnt < bufRX_SIZE - 1);
 1b8:	8a 30       	cpi	r24, 0x0A	; 10
 1ba:	19 f0       	breq	.+6      	; 0x1c2 <UART_receive_cmd+0x2a>
 1bc:	cf 31       	cpi	r28, 0x1F	; 31
 1be:	d1 05       	cpc	r29, r1
 1c0:	a9 f7       	brne	.-22     	; 0x1ac <UART_receive_cmd+0x14>
    bufRX[cnt - 2] = '\0'; // видаляємо \r
 1c2:	fe 01       	movw	r30, r28
 1c4:	e0 52       	subi	r30, 0x20	; 32
 1c6:	ff 4f       	sbci	r31, 0xFF	; 255
 1c8:	10 82       	st	Z, r1
    return cnt;
}
 1ca:	7e 01       	movw	r14, r28
 1cc:	8c 2f       	mov	r24, r28
 1ce:	9f 2d       	mov	r25, r15
 1d0:	df 91       	pop	r29
 1d2:	cf 91       	pop	r28
 1d4:	1f 91       	pop	r17
 1d6:	0f 91       	pop	r16
 1d8:	ff 90       	pop	r15
 1da:	ef 90       	pop	r14
 1dc:	08 95       	ret

000001de <Command_parser>:

void Command_parser(void) {
 1de:	2f 92       	push	r2
 1e0:	3f 92       	push	r3
 1e2:	4f 92       	push	r4
 1e4:	5f 92       	push	r5
 1e6:	6f 92       	push	r6
 1e8:	7f 92       	push	r7
 1ea:	8f 92       	push	r8
 1ec:	9f 92       	push	r9
 1ee:	af 92       	push	r10
 1f0:	bf 92       	push	r11
 1f2:	cf 92       	push	r12
 1f4:	df 92       	push	r13
 1f6:	ef 92       	push	r14
 1f8:	ff 92       	push	r15
 1fa:	0f 93       	push	r16
 1fc:	1f 93       	push	r17
 1fe:	cf 93       	push	r28
 200:	df 93       	push	r29
    while (1) {
        process_adc(); // перевірка і виконання вимірювання (по прапорцю)

        if (UCSRA & (1 << RXC)) { // якщо є команда
            UART_receive_cmd();
            if (strcmp(bufRX, "under500") == 0) {
 202:	c2 ee       	ldi	r28, 0xE2	; 226
 204:	d0 e0       	ldi	r29, 0x00	; 0
 206:	0a e6       	ldi	r16, 0x6A	; 106
 208:	10 e0       	ldi	r17, 0x00	; 0
                mode = MODE_LOW;
                UART_send_str("Mode: under500\r\n");
            } else if (strcmp(bufRX, "over500") == 0) {
 20a:	0f 2e       	mov	r0, r31
 20c:	f4 e8       	ldi	r31, 0x84	; 132
 20e:	ef 2e       	mov	r14, r31
 210:	f0 e0       	ldi	r31, 0x00	; 0
 212:	ff 2e       	mov	r15, r31
 214:	f0 2d       	mov	r31, r0
                mode = MODE_HIGH;
                UART_send_str("Mode: over500\r\n");
            } else if (strcmp(bufRX, "все підряд") == 0) {
 216:	0f 2e       	mov	r0, r31
 218:	fc e9       	ldi	r31, 0x9C	; 156
 21a:	cf 2e       	mov	r12, r31
 21c:	f0 e0       	ldi	r31, 0x00	; 0
 21e:	df 2e       	mov	r13, r31
 220:	f0 2d       	mov	r31, r0
                mode = MODE_ALL;
                UART_send_str("Mode: all\r\n");
            } else if (strcmp(bufRX, "off") == 0) {
 222:	0f 2e       	mov	r0, r31
 224:	fc eb       	ldi	r31, 0xBC	; 188
 226:	af 2e       	mov	r10, r31
 228:	f0 e0       	ldi	r31, 0x00	; 0
 22a:	bf 2e       	mov	r11, r31
 22c:	f0 2d       	mov	r31, r0
                mode = MODE_OFF;
                UART_send_str("Mode off\r\n");
            } else {
                UART_send_str("Unknown command\r\n");
 22e:	0f 2e       	mov	r0, r31
 230:	fb ec       	ldi	r31, 0xCB	; 203
 232:	6f 2e       	mov	r6, r31
 234:	f0 e0       	ldi	r31, 0x00	; 0
 236:	7f 2e       	mov	r7, r31
 238:	f0 2d       	mov	r31, r0
            UART_receive_cmd();
            if (strcmp(bufRX, "under500") == 0) {
                mode = MODE_LOW;
                UART_send_str("Mode: under500\r\n");
            } else if (strcmp(bufRX, "over500") == 0) {
                mode = MODE_HIGH;
 23a:	44 24       	eor	r4, r4
 23c:	68 94       	set
 23e:	41 f8       	bld	r4, 1
                UART_send_str("Mode: over500\r\n");
 240:	0f 2e       	mov	r0, r31
 242:	fc e8       	ldi	r31, 0x8C	; 140
 244:	2f 2e       	mov	r2, r31
 246:	f0 e0       	ldi	r31, 0x00	; 0
 248:	3f 2e       	mov	r3, r31
 24a:	f0 2d       	mov	r31, r0
        process_adc(); // перевірка і виконання вимірювання (по прапорцю)

        if (UCSRA & (1 << RXC)) { // якщо є команда
            UART_receive_cmd();
            if (strcmp(bufRX, "under500") == 0) {
                mode = MODE_LOW;
 24c:	55 24       	eor	r5, r5
 24e:	53 94       	inc	r5
                UART_send_str("Mode: under500\r\n");
 250:	0f 2e       	mov	r0, r31
 252:	f3 e7       	ldi	r31, 0x73	; 115
 254:	8f 2e       	mov	r8, r31
 256:	f0 e0       	ldi	r31, 0x00	; 0
 258:	9f 2e       	mov	r9, r31
 25a:	f0 2d       	mov	r31, r0
    return cnt;
}

void Command_parser(void) {
    while (1) {
        process_adc(); // перевірка і виконання вимірювання (по прапорцю)
 25c:	0e 94 90 00 	call	0x120	; 0x120 <process_adc>

        if (UCSRA & (1 << RXC)) { // якщо є команда
 260:	5f 9b       	sbis	0x0b, 7	; 11
 262:	fc cf       	rjmp	.-8      	; 0x25c <Command_parser+0x7e>
            UART_receive_cmd();
 264:	0e 94 cc 00 	call	0x198	; 0x198 <UART_receive_cmd>
            if (strcmp(bufRX, "under500") == 0) {
 268:	ce 01       	movw	r24, r28
 26a:	b8 01       	movw	r22, r16
 26c:	0e 94 85 01 	call	0x30a	; 0x30a <strcmp>
 270:	28 2f       	mov	r18, r24
 272:	39 2f       	mov	r19, r25
 274:	21 15       	cp	r18, r1
 276:	31 05       	cpc	r19, r1
 278:	31 f4       	brne	.+12     	; 0x286 <Command_parser+0xa8>
                mode = MODE_LOW;
 27a:	50 92 de 00 	sts	0x00DE, r5
                UART_send_str("Mode: under500\r\n");
 27e:	c4 01       	movw	r24, r8
 280:	0e 94 55 00 	call	0xaa	; 0xaa <UART_send_str>
 284:	eb cf       	rjmp	.-42     	; 0x25c <Command_parser+0x7e>
            } else if (strcmp(bufRX, "over500") == 0) {
 286:	ce 01       	movw	r24, r28
 288:	b7 01       	movw	r22, r14
 28a:	0e 94 85 01 	call	0x30a	; 0x30a <strcmp>
 28e:	28 2f       	mov	r18, r24
 290:	39 2f       	mov	r19, r25
 292:	21 15       	cp	r18, r1
 294:	31 05       	cpc	r19, r1
 296:	31 f4       	brne	.+12     	; 0x2a4 <Command_parser+0xc6>
                mode = MODE_HIGH;
 298:	40 92 de 00 	sts	0x00DE, r4
                UART_send_str("Mode: over500\r\n");
 29c:	c1 01       	movw	r24, r2
 29e:	0e 94 55 00 	call	0xaa	; 0xaa <UART_send_str>
 2a2:	dc cf       	rjmp	.-72     	; 0x25c <Command_parser+0x7e>
            } else if (strcmp(bufRX, "все підряд") == 0) {
 2a4:	ce 01       	movw	r24, r28
 2a6:	b6 01       	movw	r22, r12
 2a8:	0e 94 85 01 	call	0x30a	; 0x30a <strcmp>
 2ac:	28 2f       	mov	r18, r24
 2ae:	39 2f       	mov	r19, r25
 2b0:	21 15       	cp	r18, r1
 2b2:	31 05       	cpc	r19, r1
 2b4:	41 f4       	brne	.+16     	; 0x2c6 <Command_parser+0xe8>
                mode = MODE_ALL;
 2b6:	83 e0       	ldi	r24, 0x03	; 3
 2b8:	80 93 de 00 	sts	0x00DE, r24
                UART_send_str("Mode: all\r\n");
 2bc:	80 eb       	ldi	r24, 0xB0	; 176
 2be:	90 e0       	ldi	r25, 0x00	; 0
 2c0:	0e 94 55 00 	call	0xaa	; 0xaa <UART_send_str>
 2c4:	cb cf       	rjmp	.-106    	; 0x25c <Command_parser+0x7e>
            } else if (strcmp(bufRX, "off") == 0) {
 2c6:	ce 01       	movw	r24, r28
 2c8:	b5 01       	movw	r22, r10
 2ca:	0e 94 85 01 	call	0x30a	; 0x30a <strcmp>
 2ce:	28 2f       	mov	r18, r24
 2d0:	39 2f       	mov	r19, r25
 2d2:	21 15       	cp	r18, r1
 2d4:	31 05       	cpc	r19, r1
 2d6:	39 f4       	brne	.+14     	; 0x2e6 <Command_parser+0x108>
                mode = MODE_OFF;
 2d8:	10 92 de 00 	sts	0x00DE, r1
                UART_send_str("Mode off\r\n");
 2dc:	80 ec       	ldi	r24, 0xC0	; 192
 2de:	90 e0       	ldi	r25, 0x00	; 0
 2e0:	0e 94 55 00 	call	0xaa	; 0xaa <UART_send_str>
 2e4:	bb cf       	rjmp	.-138    	; 0x25c <Command_parser+0x7e>
            } else {
                UART_send_str("Unknown command\r\n");
 2e6:	c3 01       	movw	r24, r6
 2e8:	0e 94 55 00 	call	0xaa	; 0xaa <UART_send_str>
 2ec:	b7 cf       	rjmp	.-146    	; 0x25c <Command_parser+0x7e>

000002ee <main>:
        }
    }
}

int main(void) {
    DDRD &= ~(1 << PD2); // INT0 як вхід
 2ee:	8a 98       	cbi	0x11, 2	; 17
    PORTD |= (1 << PD2); // підтяжка до VCC
 2f0:	92 9a       	sbi	0x12, 2	; 18

    UART_Init();
 2f2:	0e 94 49 00 	call	0x92	; 0x92 <UART_Init>
    adc_init();
 2f6:	0e 94 68 00 	call	0xd0	; 0xd0 <adc_init>
    ext_int0_init();
 2fa:	0e 94 77 00 	call	0xee	; 0xee <ext_int0_init>

    sei(); // Enable interrupts
 2fe:	78 94       	sei

    Command_parser();
 300:	0e 94 ef 00 	call	0x1de	; 0x1de <Command_parser>
}
 304:	80 e0       	ldi	r24, 0x00	; 0
 306:	90 e0       	ldi	r25, 0x00	; 0
 308:	08 95       	ret

0000030a <strcmp>:
 30a:	fb 01       	movw	r30, r22
 30c:	dc 01       	movw	r26, r24
 30e:	8d 91       	ld	r24, X+
 310:	01 90       	ld	r0, Z+
 312:	80 19       	sub	r24, r0
 314:	01 10       	cpse	r0, r1
 316:	d9 f3       	breq	.-10     	; 0x30e <strcmp+0x4>
 318:	99 0b       	sbc	r25, r25
 31a:	08 95       	ret

0000031c <itoa>:
 31c:	fb 01       	movw	r30, r22
 31e:	9f 01       	movw	r18, r30
 320:	e8 94       	clt
 322:	42 30       	cpi	r20, 0x02	; 2
 324:	c4 f0       	brlt	.+48     	; 0x356 <itoa+0x3a>
 326:	45 32       	cpi	r20, 0x25	; 37
 328:	b4 f4       	brge	.+44     	; 0x356 <itoa+0x3a>
 32a:	4a 30       	cpi	r20, 0x0A	; 10
 32c:	29 f4       	brne	.+10     	; 0x338 <itoa+0x1c>
 32e:	97 fb       	bst	r25, 7
 330:	1e f4       	brtc	.+6      	; 0x338 <itoa+0x1c>
 332:	90 95       	com	r25
 334:	81 95       	neg	r24
 336:	9f 4f       	sbci	r25, 0xFF	; 255
 338:	64 2f       	mov	r22, r20
 33a:	77 27       	eor	r23, r23
 33c:	0e 94 bf 01 	call	0x37e	; 0x37e <__udivmodhi4>
 340:	80 5d       	subi	r24, 0xD0	; 208
 342:	8a 33       	cpi	r24, 0x3A	; 58
 344:	0c f0       	brlt	.+2      	; 0x348 <itoa+0x2c>
 346:	89 5d       	subi	r24, 0xD9	; 217
 348:	81 93       	st	Z+, r24
 34a:	cb 01       	movw	r24, r22
 34c:	00 97       	sbiw	r24, 0x00	; 0
 34e:	a1 f7       	brne	.-24     	; 0x338 <itoa+0x1c>
 350:	16 f4       	brtc	.+4      	; 0x356 <itoa+0x3a>
 352:	5d e2       	ldi	r21, 0x2D	; 45
 354:	51 93       	st	Z+, r21
 356:	10 82       	st	Z, r1
 358:	c9 01       	movw	r24, r18
 35a:	0c 94 af 01 	jmp	0x35e	; 0x35e <strrev>

0000035e <strrev>:
 35e:	dc 01       	movw	r26, r24
 360:	fc 01       	movw	r30, r24
 362:	67 2f       	mov	r22, r23
 364:	71 91       	ld	r23, Z+
 366:	77 23       	and	r23, r23
 368:	e1 f7       	brne	.-8      	; 0x362 <strrev+0x4>
 36a:	32 97       	sbiw	r30, 0x02	; 2
 36c:	04 c0       	rjmp	.+8      	; 0x376 <strrev+0x18>
 36e:	7c 91       	ld	r23, X
 370:	6d 93       	st	X+, r22
 372:	70 83       	st	Z, r23
 374:	62 91       	ld	r22, -Z
 376:	ae 17       	cp	r26, r30
 378:	bf 07       	cpc	r27, r31
 37a:	c8 f3       	brcs	.-14     	; 0x36e <strrev+0x10>
 37c:	08 95       	ret

0000037e <__udivmodhi4>:
 37e:	aa 1b       	sub	r26, r26
 380:	bb 1b       	sub	r27, r27
 382:	51 e1       	ldi	r21, 0x11	; 17
 384:	07 c0       	rjmp	.+14     	; 0x394 <__udivmodhi4_ep>

00000386 <__udivmodhi4_loop>:
 386:	aa 1f       	adc	r26, r26
 388:	bb 1f       	adc	r27, r27
 38a:	a6 17       	cp	r26, r22
 38c:	b7 07       	cpc	r27, r23
 38e:	10 f0       	brcs	.+4      	; 0x394 <__udivmodhi4_ep>
 390:	a6 1b       	sub	r26, r22
 392:	b7 0b       	sbc	r27, r23

00000394 <__udivmodhi4_ep>:
 394:	88 1f       	adc	r24, r24
 396:	99 1f       	adc	r25, r25
 398:	5a 95       	dec	r21
 39a:	a9 f7       	brne	.-22     	; 0x386 <__udivmodhi4_loop>
 39c:	80 95       	com	r24
 39e:	90 95       	com	r25
 3a0:	bc 01       	movw	r22, r24
 3a2:	cd 01       	movw	r24, r26
 3a4:	08 95       	ret

000003a6 <_exit>:
 3a6:	f8 94       	cli

000003a8 <__stop_program>:
 3a8:	ff cf       	rjmp	.-2      	; 0x3a8 <__stop_program>
