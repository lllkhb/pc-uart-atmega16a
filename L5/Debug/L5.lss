
L5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000620  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000009e  00800060  00000620  000006b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000060  008000fe  008000fe  00000752  2**0
                  ALLOC
  3 .stab         000009d8  00000000  00000000  00000754  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000001db  00000000  00000000  0000112c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000020  00000000  00000000  00001307  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000012b  00000000  00000000  00001327  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000049d  00000000  00000000  00001452  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000001fe  00000000  00000000  000018ef  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000609  00000000  00000000  00001aed  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000000d0  00000000  00000000  000020f8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000019c  00000000  00000000  000021c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000001ad  00000000  00000000  00002364  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 00000038  00000000  00000000  00002511  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 4c 01 	jmp	0x298	; 0x298 <__vector_1>
   8:	0c 94 b4 01 	jmp	0x368	; 0x368 <__vector_2>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__vector_19>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 e2       	ldi	r30, 0x20	; 32
  68:	f6 e0       	ldi	r31, 0x06	; 6
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ae 3f       	cpi	r26, 0xFE	; 254
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	11 e0       	ldi	r17, 0x01	; 1
  78:	ae ef       	ldi	r26, 0xFE	; 254
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ae 35       	cpi	r26, 0x5E	; 94
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 a1 02 	call	0x542	; 0x542 <main>
  8a:	0c 94 0e 03 	jmp	0x61c	; 0x61c <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <UART_Init>:
unsigned char bufRX[bufRX_SIZE] = {0};
unsigned char bufTMP[bufTMP_SIZE] = {0};
volatile uint8_t adc_index = 0;

void UART_Init(void) {
    UBRRL = UBRR_value;
  92:	8c e0       	ldi	r24, 0x0C	; 12
  94:	89 b9       	out	0x09, r24	; 9
    UBRRH = (UBRR_value >> 8);
  96:	10 bc       	out	0x20, r1	; 32
    UCSRB = (1 << TXEN) | (1 << RXEN);
  98:	88 e1       	ldi	r24, 0x18	; 24
  9a:	8a b9       	out	0x0a, r24	; 10
    UCSRC = (1 << URSEL) | (1 << UCSZ1) | (1 << UCSZ0);
  9c:	86 e8       	ldi	r24, 0x86	; 134
  9e:	80 bd       	out	0x20, r24	; 32
}
  a0:	08 95       	ret

000000a2 <UART_send>:

void UART_send(unsigned char value) {
    while (!(UCSRA & (1 << UDRE)));
  a2:	5d 9b       	sbis	0x0b, 5	; 11
  a4:	fe cf       	rjmp	.-4      	; 0xa2 <UART_send>
    UDR = value;
  a6:	8c b9       	out	0x0c, r24	; 12
}
  a8:	08 95       	ret

000000aa <UART_send_str>:

void UART_send_str(unsigned char *str) {
  aa:	cf 93       	push	r28
  ac:	df 93       	push	r29
  ae:	ec 01       	movw	r28, r24
    while (*str != '\0') {
  b0:	88 81       	ld	r24, Y
  b2:	88 23       	and	r24, r24
  b4:	31 f0       	breq	.+12     	; 0xc2 <UART_send_str+0x18>
void UART_send(unsigned char value) {
    while (!(UCSRA & (1 << UDRE)));
    UDR = value;
}

void UART_send_str(unsigned char *str) {
  b6:	21 96       	adiw	r28, 0x01	; 1
    while (*str != '\0') {
        UART_send(*str++);
  b8:	0e 94 51 00 	call	0xa2	; 0xa2 <UART_send>
    while (!(UCSRA & (1 << UDRE)));
    UDR = value;
}

void UART_send_str(unsigned char *str) {
    while (*str != '\0') {
  bc:	89 91       	ld	r24, Y+
  be:	88 23       	and	r24, r24
  c0:	d9 f7       	brne	.-10     	; 0xb8 <UART_send_str+0xe>
        UART_send(*str++);
    }
}
  c2:	df 91       	pop	r29
  c4:	cf 91       	pop	r28
  c6:	08 95       	ret

000000c8 <UART_receive>:

unsigned char UART_receive(void) {
    while (!(UCSRA & (1 << RXC)));
  c8:	5f 9b       	sbis	0x0b, 7	; 11
  ca:	fe cf       	rjmp	.-4      	; 0xc8 <UART_receive>
    return UDR;
  cc:	8c b1       	in	r24, 0x0c	; 12
}
  ce:	08 95       	ret

000000d0 <adc_init>:

void adc_init() {
    ADMUX |= (1 << REFS0);    // AREF = AVcc
  d0:	3e 9a       	sbi	0x07, 6	; 7
    ADCSRA |= (1 << ADEN);    // ADC enable
  d2:	37 9a       	sbi	0x06, 7	; 6
    SFIOR |= (1 << ADTS1) | (1 << ADTS0); // Auto trigger: Timer0 Compare Match
  d4:	80 b7       	in	r24, 0x30	; 48
  d6:	80 66       	ori	r24, 0x60	; 96
  d8:	80 bf       	out	0x30, r24	; 48
}
  da:	08 95       	ret

000000dc <__vector_19>:

ISR(TIMER0_COMP_vect) {
  dc:	1f 92       	push	r1
  de:	0f 92       	push	r0
  e0:	0f b6       	in	r0, 0x3f	; 63
  e2:	0f 92       	push	r0
  e4:	11 24       	eor	r1, r1
  e6:	8f 93       	push	r24
  e8:	9f 93       	push	r25
    if (start) {
  ea:	80 91 fe 00 	lds	r24, 0x00FE
  ee:	88 23       	and	r24, r24
  f0:	49 f0       	breq	.+18     	; 0x104 <__vector_19+0x28>
        ADCSRA |= (1 << ADSC);         // Start ADC
  f2:	36 9a       	sbi	0x06, 6	; 6
        while (ADCSRA & (1 << ADSC));  // Wait for completion
  f4:	36 99       	sbic	0x06, 6	; 6
  f6:	fe cf       	rjmp	.-4      	; 0xf4 <__vector_19+0x18>
        adc_result = ADC;
  f8:	84 b1       	in	r24, 0x04	; 4
  fa:	95 b1       	in	r25, 0x05	; 5
  fc:	90 93 00 01 	sts	0x0100, r25
 100:	80 93 ff 00 	sts	0x00FF, r24
    }
}
 104:	9f 91       	pop	r25
 106:	8f 91       	pop	r24
 108:	0f 90       	pop	r0
 10a:	0f be       	out	0x3f, r0	; 63
 10c:	0f 90       	pop	r0
 10e:	1f 90       	pop	r1
 110:	18 95       	reti

00000112 <timer0_init_ctc>:

void timer0_init_ctc() {
    TCCR0 |= (1 << WGM01);    // CTC mode
 112:	83 b7       	in	r24, 0x33	; 51
 114:	88 60       	ori	r24, 0x08	; 8
 116:	83 bf       	out	0x33, r24	; 51
    TCCR0 |= (1 << CS02);     // Prescaler 256
 118:	83 b7       	in	r24, 0x33	; 51
 11a:	84 60       	ori	r24, 0x04	; 4
 11c:	83 bf       	out	0x33, r24	; 51
    OCR0 = 12;                // ~80Hz
 11e:	8c e0       	ldi	r24, 0x0C	; 12
 120:	8c bf       	out	0x3c, r24	; 60
    TIMSK |= (1 << OCIE0);    // Enable interrupt
 122:	89 b7       	in	r24, 0x39	; 57
 124:	82 60       	ori	r24, 0x02	; 2
 126:	89 bf       	out	0x39, r24	; 57
}
 128:	08 95       	ret

0000012a <UART_receive_cmd>:

int UART_receive_cmd(void) {
 12a:	ef 92       	push	r14
 12c:	ff 92       	push	r15
 12e:	0f 93       	push	r16
 130:	1f 93       	push	r17
 132:	cf 93       	push	r28
 134:	df 93       	push	r29
    int cnt = 0;
 136:	05 e1       	ldi	r16, 0x15	; 21
 138:	11 e0       	ldi	r17, 0x01	; 1
 13a:	c0 e0       	ldi	r28, 0x00	; 0
 13c:	d0 e0       	ldi	r29, 0x00	; 0
    unsigned char rxbyte;
    do {
        rxbyte = UART_receive();
 13e:	0e 94 64 00 	call	0xc8	; 0xc8 <UART_receive>
        bufRX[cnt++] = rxbyte;
 142:	f8 01       	movw	r30, r16
 144:	81 93       	st	Z+, r24
 146:	8f 01       	movw	r16, r30
 148:	21 96       	adiw	r28, 0x01	; 1
    } while (rxbyte != '\n' && cnt < bufRX_SIZE - 1);
 14a:	8a 30       	cpi	r24, 0x0A	; 10
 14c:	19 f0       	breq	.+6      	; 0x154 <UART_receive_cmd+0x2a>
 14e:	cf 31       	cpi	r28, 0x1F	; 31
 150:	d1 05       	cpc	r29, r1
 152:	a9 f7       	brne	.-22     	; 0x13e <UART_receive_cmd+0x14>
    bufRX[cnt - 2] = '\0'; // видаляємо \r
 154:	fe 01       	movw	r30, r28
 156:	ed 5e       	subi	r30, 0xED	; 237
 158:	fe 4f       	sbci	r31, 0xFE	; 254
 15a:	10 82       	st	Z, r1
    return cnt;
}
 15c:	7e 01       	movw	r14, r28
 15e:	8c 2f       	mov	r24, r28
 160:	9f 2d       	mov	r25, r15
 162:	df 91       	pop	r29
 164:	cf 91       	pop	r28
 166:	1f 91       	pop	r17
 168:	0f 91       	pop	r16
 16a:	ff 90       	pop	r15
 16c:	ef 90       	pop	r14
 16e:	08 95       	ret

00000170 <Command_parser>:

    return cnt;
}
*/

void Command_parser(void) {
 170:	2f 92       	push	r2
 172:	3f 92       	push	r3
 174:	4f 92       	push	r4
 176:	5f 92       	push	r5
 178:	6f 92       	push	r6
 17a:	7f 92       	push	r7
 17c:	8f 92       	push	r8
 17e:	9f 92       	push	r9
 180:	af 92       	push	r10
 182:	bf 92       	push	r11
 184:	cf 92       	push	r12
 186:	df 92       	push	r13
 188:	ef 92       	push	r14
 18a:	ff 92       	push	r15
 18c:	0f 93       	push	r16
 18e:	1f 93       	push	r17
 190:	cf 93       	push	r28
 192:	df 93       	push	r29
    while (1) {
        UART_receive_cmd();
		if (strcmp(bufRX, "start") == 0) {
 194:	c5 e1       	ldi	r28, 0x15	; 21
 196:	d1 e0       	ldi	r29, 0x01	; 1
 198:	00 e6       	ldi	r16, 0x60	; 96
 19a:	10 e0       	ldi	r17, 0x00	; 0
            start = 1;
 19c:	bb 24       	eor	r11, r11
 19e:	b3 94       	inc	r11
            UART_send_str("Mode: start\r\n");
 1a0:	0f 2e       	mov	r0, r31
 1a2:	f6 e6       	ldi	r31, 0x66	; 102
 1a4:	6f 2e       	mov	r6, r31
 1a6:	f0 e0       	ldi	r31, 0x00	; 0
 1a8:	7f 2e       	mov	r7, r31
 1aa:	f0 2d       	mov	r31, r0
        } else if (strcmp(bufRX, "under500") == 0) {
 1ac:	0f 2e       	mov	r0, r31
 1ae:	f4 e7       	ldi	r31, 0x74	; 116
 1b0:	ef 2e       	mov	r14, r31
 1b2:	f0 e0       	ldi	r31, 0x00	; 0
 1b4:	ff 2e       	mov	r15, r31
 1b6:	f0 2d       	mov	r31, r0
            mode = MODE_LOW;
            UART_send_str("Mode: under500\r\n");
        } else if (strcmp(bufRX, "over500") == 0) {
 1b8:	0f 2e       	mov	r0, r31
 1ba:	fe e8       	ldi	r31, 0x8E	; 142
 1bc:	cf 2e       	mov	r12, r31
 1be:	f0 e0       	ldi	r31, 0x00	; 0
 1c0:	df 2e       	mov	r13, r31
 1c2:	f0 2d       	mov	r31, r0
            mode = MODE_HIGH;
            UART_send_str("Mode: over500\r\n");
        } else if (strcmp(bufRX, "all") == 0) {
 1c4:	0f 2e       	mov	r0, r31
 1c6:	f6 ea       	ldi	r31, 0xA6	; 166
 1c8:	8f 2e       	mov	r8, r31
 1ca:	f0 e0       	ldi	r31, 0x00	; 0
 1cc:	9f 2e       	mov	r9, r31
 1ce:	f0 2d       	mov	r31, r0
            mode = MODE_ALL;
            UART_send_str("Mode: all\r\n");
        } else if (strcmp(bufRX, "off") == 0) {
 1d0:	0f 2e       	mov	r0, r31
 1d2:	f6 eb       	ldi	r31, 0xB6	; 182
 1d4:	4f 2e       	mov	r4, r31
 1d6:	f0 e0       	ldi	r31, 0x00	; 0
 1d8:	5f 2e       	mov	r5, r31
 1da:	f0 2d       	mov	r31, r0
            UART_send_str("Mode: under500\r\n");
        } else if (strcmp(bufRX, "over500") == 0) {
            mode = MODE_HIGH;
            UART_send_str("Mode: over500\r\n");
        } else if (strcmp(bufRX, "all") == 0) {
            mode = MODE_ALL;
 1dc:	aa 24       	eor	r10, r10
 1de:	68 94       	set
 1e0:	a1 f8       	bld	r10, 1
		if (strcmp(bufRX, "start") == 0) {
            start = 1;
            UART_send_str("Mode: start\r\n");
        } else if (strcmp(bufRX, "under500") == 0) {
            mode = MODE_LOW;
            UART_send_str("Mode: under500\r\n");
 1e2:	0f 2e       	mov	r0, r31
 1e4:	fd e7       	ldi	r31, 0x7D	; 125
 1e6:	2f 2e       	mov	r2, r31
 1e8:	f0 e0       	ldi	r31, 0x00	; 0
 1ea:	3f 2e       	mov	r3, r31
 1ec:	f0 2d       	mov	r31, r0
}
*/

void Command_parser(void) {
    while (1) {
        UART_receive_cmd();
 1ee:	0e 94 95 00 	call	0x12a	; 0x12a <UART_receive_cmd>
		if (strcmp(bufRX, "start") == 0) {
 1f2:	ce 01       	movw	r24, r28
 1f4:	b8 01       	movw	r22, r16
 1f6:	0e 94 c0 02 	call	0x580	; 0x580 <strcmp>
 1fa:	28 2f       	mov	r18, r24
 1fc:	39 2f       	mov	r19, r25
 1fe:	21 15       	cp	r18, r1
 200:	31 05       	cpc	r19, r1
 202:	31 f4       	brne	.+12     	; 0x210 <Command_parser+0xa0>
            start = 1;
 204:	b0 92 fe 00 	sts	0x00FE, r11
            UART_send_str("Mode: start\r\n");
 208:	c3 01       	movw	r24, r6
 20a:	0e 94 55 00 	call	0xaa	; 0xaa <UART_send_str>
 20e:	ef cf       	rjmp	.-34     	; 0x1ee <Command_parser+0x7e>
        } else if (strcmp(bufRX, "under500") == 0) {
 210:	ce 01       	movw	r24, r28
 212:	b7 01       	movw	r22, r14
 214:	0e 94 c0 02 	call	0x580	; 0x580 <strcmp>
 218:	28 2f       	mov	r18, r24
 21a:	39 2f       	mov	r19, r25
 21c:	21 15       	cp	r18, r1
 21e:	31 05       	cpc	r19, r1
 220:	31 f4       	brne	.+12     	; 0x22e <Command_parser+0xbe>
            mode = MODE_LOW;
 222:	10 92 fc 00 	sts	0x00FC, r1
            UART_send_str("Mode: under500\r\n");
 226:	c1 01       	movw	r24, r2
 228:	0e 94 55 00 	call	0xaa	; 0xaa <UART_send_str>
 22c:	e0 cf       	rjmp	.-64     	; 0x1ee <Command_parser+0x7e>
        } else if (strcmp(bufRX, "over500") == 0) {
 22e:	ce 01       	movw	r24, r28
 230:	b6 01       	movw	r22, r12
 232:	0e 94 c0 02 	call	0x580	; 0x580 <strcmp>
 236:	28 2f       	mov	r18, r24
 238:	39 2f       	mov	r19, r25
 23a:	21 15       	cp	r18, r1
 23c:	31 05       	cpc	r19, r1
 23e:	39 f4       	brne	.+14     	; 0x24e <Command_parser+0xde>
            mode = MODE_HIGH;
 240:	b0 92 fc 00 	sts	0x00FC, r11
            UART_send_str("Mode: over500\r\n");
 244:	86 e9       	ldi	r24, 0x96	; 150
 246:	90 e0       	ldi	r25, 0x00	; 0
 248:	0e 94 55 00 	call	0xaa	; 0xaa <UART_send_str>
 24c:	d0 cf       	rjmp	.-96     	; 0x1ee <Command_parser+0x7e>
        } else if (strcmp(bufRX, "all") == 0) {
 24e:	ce 01       	movw	r24, r28
 250:	b4 01       	movw	r22, r8
 252:	0e 94 c0 02 	call	0x580	; 0x580 <strcmp>
 256:	28 2f       	mov	r18, r24
 258:	39 2f       	mov	r19, r25
 25a:	21 15       	cp	r18, r1
 25c:	31 05       	cpc	r19, r1
 25e:	39 f4       	brne	.+14     	; 0x26e <Command_parser+0xfe>
            mode = MODE_ALL;
 260:	a0 92 fc 00 	sts	0x00FC, r10
            UART_send_str("Mode: all\r\n");
 264:	8a ea       	ldi	r24, 0xAA	; 170
 266:	90 e0       	ldi	r25, 0x00	; 0
 268:	0e 94 55 00 	call	0xaa	; 0xaa <UART_send_str>
 26c:	c0 cf       	rjmp	.-128    	; 0x1ee <Command_parser+0x7e>
        } else if (strcmp(bufRX, "off") == 0) {
 26e:	ce 01       	movw	r24, r28
 270:	b2 01       	movw	r22, r4
 272:	0e 94 c0 02 	call	0x580	; 0x580 <strcmp>
 276:	28 2f       	mov	r18, r24
 278:	39 2f       	mov	r19, r25
 27a:	21 15       	cp	r18, r1
 27c:	31 05       	cpc	r19, r1
 27e:	39 f4       	brne	.+14     	; 0x28e <Command_parser+0x11e>
            start = 0;
 280:	10 92 fe 00 	sts	0x00FE, r1
            UART_send_str("Mode: off\r\n");
 284:	8a eb       	ldi	r24, 0xBA	; 186
 286:	90 e0       	ldi	r25, 0x00	; 0
 288:	0e 94 55 00 	call	0xaa	; 0xaa <UART_send_str>
 28c:	b0 cf       	rjmp	.-160    	; 0x1ee <Command_parser+0x7e>
        } else {
            UART_send_str("Unknown command\r\n");
 28e:	86 ec       	ldi	r24, 0xC6	; 198
 290:	90 e0       	ldi	r25, 0x00	; 0
 292:	0e 94 55 00 	call	0xaa	; 0xaa <UART_send_str>
 296:	ab cf       	rjmp	.-170    	; 0x1ee <Command_parser+0x7e>

00000298 <__vector_1>:
        }
    }
}

ISR(INT0_vect) {
 298:	1f 92       	push	r1
 29a:	0f 92       	push	r0
 29c:	0f b6       	in	r0, 0x3f	; 63
 29e:	0f 92       	push	r0
 2a0:	11 24       	eor	r1, r1
 2a2:	2f 93       	push	r18
 2a4:	3f 93       	push	r19
 2a6:	4f 93       	push	r20
 2a8:	5f 93       	push	r21
 2aa:	6f 93       	push	r22
 2ac:	7f 93       	push	r23
 2ae:	8f 93       	push	r24
 2b0:	9f 93       	push	r25
 2b2:	af 93       	push	r26
 2b4:	bf 93       	push	r27
 2b6:	cf 93       	push	r28
 2b8:	df 93       	push	r29
 2ba:	ef 93       	push	r30
 2bc:	ff 93       	push	r31
    if (start && adc_index < 10) {
 2be:	80 91 fe 00 	lds	r24, 0x00FE
 2c2:	88 23       	and	r24, r24
 2c4:	f1 f1       	breq	.+124    	; 0x342 <__vector_1+0xaa>
 2c6:	80 91 55 01 	lds	r24, 0x0155
 2ca:	8a 30       	cpi	r24, 0x0A	; 10
 2cc:	d0 f5       	brcc	.+116    	; 0x342 <__vector_1+0xaa>
        // Можна взяти adc_result, якщо ти використовуєш таймер для зчитування
        // Або примусово ініціювати перетворення:
        ADCSRA |= (1 << ADSC);
 2ce:	36 9a       	sbi	0x06, 6	; 6
        while (ADCSRA & (1 << ADSC));  // Чекаємо завершення
 2d0:	36 99       	sbic	0x06, 6	; 6
 2d2:	fe cf       	rjmp	.-4      	; 0x2d0 <__vector_1+0x38>
        ADCarray[adc_index] = ADC;
 2d4:	e0 91 55 01 	lds	r30, 0x0155
 2d8:	24 b1       	in	r18, 0x04	; 4
 2da:	35 b1       	in	r19, 0x05	; 5
 2dc:	f0 e0       	ldi	r31, 0x00	; 0
 2de:	81 e0       	ldi	r24, 0x01	; 1
 2e0:	91 e0       	ldi	r25, 0x01	; 1
 2e2:	ee 0f       	add	r30, r30
 2e4:	ff 1f       	adc	r31, r31
 2e6:	e8 0f       	add	r30, r24
 2e8:	f9 1f       	adc	r31, r25
 2ea:	31 83       	std	Z+1, r19	; 0x01
 2ec:	20 83       	st	Z, r18
        
        // Відладкове повідомлення
        itoa(ADCarray[adc_index], buf, 10);
 2ee:	20 91 55 01 	lds	r18, 0x0155
 2f2:	30 e0       	ldi	r19, 0x00	; 0
 2f4:	22 0f       	add	r18, r18
 2f6:	33 1f       	adc	r19, r19
 2f8:	82 0f       	add	r24, r18
 2fa:	93 1f       	adc	r25, r19
 2fc:	c6 e5       	ldi	r28, 0x56	; 86
 2fe:	d1 e0       	ldi	r29, 0x01	; 1
 300:	fc 01       	movw	r30, r24
 302:	80 81       	ld	r24, Z
 304:	91 81       	ldd	r25, Z+1	; 0x01
 306:	be 01       	movw	r22, r28
 308:	4a e0       	ldi	r20, 0x0A	; 10
 30a:	50 e0       	ldi	r21, 0x00	; 0
 30c:	0e 94 c9 02 	call	0x592	; 0x592 <itoa>
        UART_send_str("ADC[");
 310:	88 ed       	ldi	r24, 0xD8	; 216
 312:	90 e0       	ldi	r25, 0x00	; 0
 314:	0e 94 55 00 	call	0xaa	; 0xaa <UART_send_str>
        UART_send(adc_index + '0');
 318:	80 91 55 01 	lds	r24, 0x0155
 31c:	80 5d       	subi	r24, 0xD0	; 208
 31e:	0e 94 51 00 	call	0xa2	; 0xa2 <UART_send>
        UART_send_str("] = ");
 322:	8d ed       	ldi	r24, 0xDD	; 221
 324:	90 e0       	ldi	r25, 0x00	; 0
 326:	0e 94 55 00 	call	0xaa	; 0xaa <UART_send_str>
        UART_send_str(buf);
 32a:	ce 01       	movw	r24, r28
 32c:	0e 94 55 00 	call	0xaa	; 0xaa <UART_send_str>
        UART_send_str("\r\n");
 330:	82 ee       	ldi	r24, 0xE2	; 226
 332:	90 e0       	ldi	r25, 0x00	; 0
 334:	0e 94 55 00 	call	0xaa	; 0xaa <UART_send_str>

        adc_index++; // Збільшуємо індекс
 338:	80 91 55 01 	lds	r24, 0x0155
 33c:	8f 5f       	subi	r24, 0xFF	; 255
 33e:	80 93 55 01 	sts	0x0155, r24
    }
}
 342:	ff 91       	pop	r31
 344:	ef 91       	pop	r30
 346:	df 91       	pop	r29
 348:	cf 91       	pop	r28
 34a:	bf 91       	pop	r27
 34c:	af 91       	pop	r26
 34e:	9f 91       	pop	r25
 350:	8f 91       	pop	r24
 352:	7f 91       	pop	r23
 354:	6f 91       	pop	r22
 356:	5f 91       	pop	r21
 358:	4f 91       	pop	r20
 35a:	3f 91       	pop	r19
 35c:	2f 91       	pop	r18
 35e:	0f 90       	pop	r0
 360:	0f be       	out	0x3f, r0	; 63
 362:	0f 90       	pop	r0
 364:	1f 90       	pop	r1
 366:	18 95       	reti

00000368 <__vector_2>:




// INT1: вивести масив у термінал, якщо умова виконана
ISR(INT1_vect) {
 368:	1f 92       	push	r1
 36a:	0f 92       	push	r0
 36c:	0f b6       	in	r0, 0x3f	; 63
 36e:	0f 92       	push	r0
 370:	11 24       	eor	r1, r1
 372:	af 92       	push	r10
 374:	bf 92       	push	r11
 376:	cf 92       	push	r12
 378:	df 92       	push	r13
 37a:	ef 92       	push	r14
 37c:	ff 92       	push	r15
 37e:	0f 93       	push	r16
 380:	1f 93       	push	r17
 382:	2f 93       	push	r18
 384:	3f 93       	push	r19
 386:	4f 93       	push	r20
 388:	5f 93       	push	r21
 38a:	6f 93       	push	r22
 38c:	7f 93       	push	r23
 38e:	8f 93       	push	r24
 390:	9f 93       	push	r25
 392:	af 93       	push	r26
 394:	bf 93       	push	r27
 396:	cf 93       	push	r28
 398:	df 93       	push	r29
 39a:	ef 93       	push	r30
 39c:	ff 93       	push	r31
	if(start){
 39e:	80 91 fe 00 	lds	r24, 0x00FE
 3a2:	88 23       	and	r24, r24
 3a4:	09 f4       	brne	.+2      	; 0x3a8 <__vector_2+0x40>
 3a6:	b2 c0       	rjmp	.+356    	; 0x50c <__stack+0xad>
    if (mode == MODE_ALL){
 3a8:	80 91 fc 00 	lds	r24, 0x00FC
 3ac:	82 30       	cpi	r24, 0x02	; 2
 3ae:	81 f5       	brne	.+96     	; 0x410 <__vector_2+0xa8>
 3b0:	c1 e0       	ldi	r28, 0x01	; 1
 3b2:	d1 e0       	ldi	r29, 0x01	; 1




// INT1: вивести масив у термінал, якщо умова виконана
ISR(INT1_vect) {
 3b4:	0f 2e       	mov	r0, r31
 3b6:	f4 e1       	ldi	r31, 0x14	; 20
 3b8:	ef 2e       	mov	r14, r31
 3ba:	ff 24       	eor	r15, r15
 3bc:	f0 2d       	mov	r31, r0
 3be:	ec 0e       	add	r14, r28
 3c0:	fd 1e       	adc	r15, r29
	if(start){
    if (mode == MODE_ALL){
        for (int i = 0; i < 10; i++) {
            itoa(ADCarray[i], buf, 10);
 3c2:	06 e5       	ldi	r16, 0x56	; 86
 3c4:	11 e0       	ldi	r17, 0x01	; 1
            UART_send_str("ADC = ");
 3c6:	0f 2e       	mov	r0, r31
 3c8:	f5 ee       	ldi	r31, 0xE5	; 229
 3ca:	cf 2e       	mov	r12, r31
 3cc:	f0 e0       	ldi	r31, 0x00	; 0
 3ce:	df 2e       	mov	r13, r31
 3d0:	f0 2d       	mov	r31, r0
            UART_send_str(buf);
            UART_send_str("\r\n");
 3d2:	0f 2e       	mov	r0, r31
 3d4:	f2 ee       	ldi	r31, 0xE2	; 226
 3d6:	af 2e       	mov	r10, r31
 3d8:	f0 e0       	ldi	r31, 0x00	; 0
 3da:	bf 2e       	mov	r11, r31
 3dc:	f0 2d       	mov	r31, r0
// INT1: вивести масив у термінал, якщо умова виконана
ISR(INT1_vect) {
	if(start){
    if (mode == MODE_ALL){
        for (int i = 0; i < 10; i++) {
            itoa(ADCarray[i], buf, 10);
 3de:	89 91       	ld	r24, Y+
 3e0:	99 91       	ld	r25, Y+
 3e2:	b8 01       	movw	r22, r16
 3e4:	4a e0       	ldi	r20, 0x0A	; 10
 3e6:	50 e0       	ldi	r21, 0x00	; 0
 3e8:	0e 94 c9 02 	call	0x592	; 0x592 <itoa>
            UART_send_str("ADC = ");
 3ec:	c6 01       	movw	r24, r12
 3ee:	0e 94 55 00 	call	0xaa	; 0xaa <UART_send_str>
            UART_send_str(buf);
 3f2:	c8 01       	movw	r24, r16
 3f4:	0e 94 55 00 	call	0xaa	; 0xaa <UART_send_str>
            UART_send_str("\r\n");
 3f8:	c5 01       	movw	r24, r10
 3fa:	0e 94 55 00 	call	0xaa	; 0xaa <UART_send_str>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3fe:	81 ee       	ldi	r24, 0xE1	; 225
 400:	94 e0       	ldi	r25, 0x04	; 4
 402:	01 97       	sbiw	r24, 0x01	; 1
 404:	f1 f7       	brne	.-4      	; 0x402 <__vector_2+0x9a>
 406:	00 c0       	rjmp	.+0      	; 0x408 <__vector_2+0xa0>
 408:	00 00       	nop

// INT1: вивести масив у термінал, якщо умова виконана
ISR(INT1_vect) {
	if(start){
    if (mode == MODE_ALL){
        for (int i = 0; i < 10; i++) {
 40a:	ce 15       	cp	r28, r14
 40c:	df 05       	cpc	r29, r15
 40e:	39 f7       	brne	.-50     	; 0x3de <__vector_2+0x76>
            UART_send_str(buf);
            UART_send_str("\r\n");
            _delay_ms(5); // пауза для UART
        }
    }
	if(mode == MODE_LOW){
 410:	80 91 fc 00 	lds	r24, 0x00FC
 414:	88 23       	and	r24, r24
 416:	d9 f5       	brne	.+118    	; 0x48e <__stack+0x2f>
 418:	c0 e0       	ldi	r28, 0x00	; 0
 41a:	d0 e0       	ldi	r29, 0x00	; 0
		for (int i = 0; i < 10; i++) {
			if(ADCarray[i] < 500){
 41c:	01 e0       	ldi	r16, 0x01	; 1
 41e:	11 e0       	ldi	r17, 0x01	; 1
				itoa(ADCarray[i], buf, 10);
 420:	0f 2e       	mov	r0, r31
 422:	f6 e5       	ldi	r31, 0x56	; 86
 424:	ef 2e       	mov	r14, r31
 426:	f1 e0       	ldi	r31, 0x01	; 1
 428:	ff 2e       	mov	r15, r31
 42a:	f0 2d       	mov	r31, r0
				UART_send_str("ADC = ");
 42c:	0f 2e       	mov	r0, r31
 42e:	f5 ee       	ldi	r31, 0xE5	; 229
 430:	cf 2e       	mov	r12, r31
 432:	f0 e0       	ldi	r31, 0x00	; 0
 434:	df 2e       	mov	r13, r31
 436:	f0 2d       	mov	r31, r0
				UART_send_str(buf);
				UART_send_str("\r\n");
 438:	0f 2e       	mov	r0, r31
 43a:	f2 ee       	ldi	r31, 0xE2	; 226
 43c:	af 2e       	mov	r10, r31
 43e:	f0 e0       	ldi	r31, 0x00	; 0
 440:	bf 2e       	mov	r11, r31
 442:	f0 2d       	mov	r31, r0
            _delay_ms(5); // пауза для UART
        }
    }
	if(mode == MODE_LOW){
		for (int i = 0; i < 10; i++) {
			if(ADCarray[i] < 500){
 444:	fe 01       	movw	r30, r28
 446:	ee 0f       	add	r30, r30
 448:	ff 1f       	adc	r31, r31
 44a:	e0 0f       	add	r30, r16
 44c:	f1 1f       	adc	r31, r17
 44e:	80 81       	ld	r24, Z
 450:	91 81       	ldd	r25, Z+1	; 0x01
 452:	21 e0       	ldi	r18, 0x01	; 1
 454:	84 3f       	cpi	r24, 0xF4	; 244
 456:	92 07       	cpc	r25, r18
 458:	ac f4       	brge	.+42     	; 0x484 <__stack+0x25>
				itoa(ADCarray[i], buf, 10);
 45a:	b7 01       	movw	r22, r14
 45c:	4a e0       	ldi	r20, 0x0A	; 10
 45e:	50 e0       	ldi	r21, 0x00	; 0
 460:	0e 94 c9 02 	call	0x592	; 0x592 <itoa>
				UART_send_str("ADC = ");
 464:	c6 01       	movw	r24, r12
 466:	0e 94 55 00 	call	0xaa	; 0xaa <UART_send_str>
				UART_send_str(buf);
 46a:	c7 01       	movw	r24, r14
 46c:	0e 94 55 00 	call	0xaa	; 0xaa <UART_send_str>
				UART_send_str("\r\n");
 470:	c5 01       	movw	r24, r10
 472:	0e 94 55 00 	call	0xaa	; 0xaa <UART_send_str>
 476:	81 ee       	ldi	r24, 0xE1	; 225
 478:	94 e0       	ldi	r25, 0x04	; 4
 47a:	01 97       	sbiw	r24, 0x01	; 1
 47c:	f1 f7       	brne	.-4      	; 0x47a <__stack+0x1b>
 47e:	00 c0       	rjmp	.+0      	; 0x480 <__stack+0x21>
 480:	00 00       	nop
 482:	01 c0       	rjmp	.+2      	; 0x486 <__stack+0x27>
				_delay_ms(5);
			} else{
				i++;
 484:	21 96       	adiw	r28, 0x01	; 1
            UART_send_str("\r\n");
            _delay_ms(5); // пауза для UART
        }
    }
	if(mode == MODE_LOW){
		for (int i = 0; i < 10; i++) {
 486:	21 96       	adiw	r28, 0x01	; 1
 488:	ca 30       	cpi	r28, 0x0A	; 10
 48a:	d1 05       	cpc	r29, r1
 48c:	dc f2       	brlt	.-74     	; 0x444 <__vector_2+0xdc>
			} else{
				i++;
			}				
        }
	}
        if(mode == MODE_HIGH){
 48e:	80 91 fc 00 	lds	r24, 0x00FC
 492:	81 30       	cpi	r24, 0x01	; 1
 494:	d9 f5       	brne	.+118    	; 0x50c <__stack+0xad>
 496:	c0 e0       	ldi	r28, 0x00	; 0
 498:	d0 e0       	ldi	r29, 0x00	; 0
			for (int i = 0; i < 10; i++) {
				if(ADCarray[i] >= 500){
 49a:	01 e0       	ldi	r16, 0x01	; 1
 49c:	11 e0       	ldi	r17, 0x01	; 1
				itoa(ADCarray[i], buf, 10);
 49e:	0f 2e       	mov	r0, r31
 4a0:	f6 e5       	ldi	r31, 0x56	; 86
 4a2:	ef 2e       	mov	r14, r31
 4a4:	f1 e0       	ldi	r31, 0x01	; 1
 4a6:	ff 2e       	mov	r15, r31
 4a8:	f0 2d       	mov	r31, r0
				UART_send_str("ADC = ");
 4aa:	0f 2e       	mov	r0, r31
 4ac:	f5 ee       	ldi	r31, 0xE5	; 229
 4ae:	cf 2e       	mov	r12, r31
 4b0:	f0 e0       	ldi	r31, 0x00	; 0
 4b2:	df 2e       	mov	r13, r31
 4b4:	f0 2d       	mov	r31, r0
				UART_send_str(buf);
				UART_send_str("\r\n");
 4b6:	0f 2e       	mov	r0, r31
 4b8:	f2 ee       	ldi	r31, 0xE2	; 226
 4ba:	af 2e       	mov	r10, r31
 4bc:	f0 e0       	ldi	r31, 0x00	; 0
 4be:	bf 2e       	mov	r11, r31
 4c0:	f0 2d       	mov	r31, r0
			}				
        }
	}
        if(mode == MODE_HIGH){
			for (int i = 0; i < 10; i++) {
				if(ADCarray[i] >= 500){
 4c2:	fe 01       	movw	r30, r28
 4c4:	ee 0f       	add	r30, r30
 4c6:	ff 1f       	adc	r31, r31
 4c8:	e0 0f       	add	r30, r16
 4ca:	f1 1f       	adc	r31, r17
 4cc:	80 81       	ld	r24, Z
 4ce:	91 81       	ldd	r25, Z+1	; 0x01
 4d0:	21 e0       	ldi	r18, 0x01	; 1
 4d2:	84 3f       	cpi	r24, 0xF4	; 244
 4d4:	92 07       	cpc	r25, r18
 4d6:	ac f0       	brlt	.+42     	; 0x502 <__stack+0xa3>
				itoa(ADCarray[i], buf, 10);
 4d8:	b7 01       	movw	r22, r14
 4da:	4a e0       	ldi	r20, 0x0A	; 10
 4dc:	50 e0       	ldi	r21, 0x00	; 0
 4de:	0e 94 c9 02 	call	0x592	; 0x592 <itoa>
				UART_send_str("ADC = ");
 4e2:	c6 01       	movw	r24, r12
 4e4:	0e 94 55 00 	call	0xaa	; 0xaa <UART_send_str>
				UART_send_str(buf);
 4e8:	c7 01       	movw	r24, r14
 4ea:	0e 94 55 00 	call	0xaa	; 0xaa <UART_send_str>
				UART_send_str("\r\n");
 4ee:	c5 01       	movw	r24, r10
 4f0:	0e 94 55 00 	call	0xaa	; 0xaa <UART_send_str>
 4f4:	81 ee       	ldi	r24, 0xE1	; 225
 4f6:	94 e0       	ldi	r25, 0x04	; 4
 4f8:	01 97       	sbiw	r24, 0x01	; 1
 4fa:	f1 f7       	brne	.-4      	; 0x4f8 <__stack+0x99>
 4fc:	00 c0       	rjmp	.+0      	; 0x4fe <__stack+0x9f>
 4fe:	00 00       	nop
 500:	01 c0       	rjmp	.+2      	; 0x504 <__stack+0xa5>
				_delay_ms(5);
			} else{
				i++;
 502:	21 96       	adiw	r28, 0x01	; 1
				i++;
			}				
        }
	}
        if(mode == MODE_HIGH){
			for (int i = 0; i < 10; i++) {
 504:	21 96       	adiw	r28, 0x01	; 1
 506:	ca 30       	cpi	r28, 0x0A	; 10
 508:	d1 05       	cpc	r29, r1
 50a:	dc f2       	brlt	.-74     	; 0x4c2 <__stack+0x63>
				i++;
			}	
			}
		}
	}	
}
 50c:	ff 91       	pop	r31
 50e:	ef 91       	pop	r30
 510:	df 91       	pop	r29
 512:	cf 91       	pop	r28
 514:	bf 91       	pop	r27
 516:	af 91       	pop	r26
 518:	9f 91       	pop	r25
 51a:	8f 91       	pop	r24
 51c:	7f 91       	pop	r23
 51e:	6f 91       	pop	r22
 520:	5f 91       	pop	r21
 522:	4f 91       	pop	r20
 524:	3f 91       	pop	r19
 526:	2f 91       	pop	r18
 528:	1f 91       	pop	r17
 52a:	0f 91       	pop	r16
 52c:	ff 90       	pop	r15
 52e:	ef 90       	pop	r14
 530:	df 90       	pop	r13
 532:	cf 90       	pop	r12
 534:	bf 90       	pop	r11
 536:	af 90       	pop	r10
 538:	0f 90       	pop	r0
 53a:	0f be       	out	0x3f, r0	; 63
 53c:	0f 90       	pop	r0
 53e:	1f 90       	pop	r1
 540:	18 95       	reti

00000542 <main>:

int main(void) {
    // Порти
    DDRA = 0x00;        // Вхід для АЦП
 542:	1a ba       	out	0x1a, r1	; 26
    DDRD = 0b00000010;  // PD1 (TX) — вихід, інші — вхід
 544:	82 e0       	ldi	r24, 0x02	; 2
 546:	81 bb       	out	0x11, r24	; 17


    // Налаштування переривань INT0, INT1 на фронт (rising edge)
    MCUCR &= ~((1 << ISC00) | (1 << ISC01) | (1 << ISC10) | (1 << ISC11));
 548:	85 b7       	in	r24, 0x35	; 53
 54a:	80 7f       	andi	r24, 0xF0	; 240
 54c:	85 bf       	out	0x35, r24	; 53
    MCUCR |= (1 << ISC01) | (1 << ISC00); // INT0
 54e:	85 b7       	in	r24, 0x35	; 53
 550:	83 60       	ori	r24, 0x03	; 3
 552:	85 bf       	out	0x35, r24	; 53
    MCUCR |= (1 << ISC11) | (1 << ISC10); // INT1
 554:	85 b7       	in	r24, 0x35	; 53
 556:	8c 60       	ori	r24, 0x0C	; 12
 558:	85 bf       	out	0x35, r24	; 53
    GICR |= (1 << INT0) | (1 << INT1);    // Увімкнути INT0 та INT1
 55a:	8b b7       	in	r24, 0x3b	; 59
 55c:	80 6c       	ori	r24, 0xC0	; 192
 55e:	8b bf       	out	0x3b, r24	; 59

    UART_Init();
 560:	0e 94 49 00 	call	0x92	; 0x92 <UART_Init>
    adc_init();
 564:	0e 94 68 00 	call	0xd0	; 0xd0 <adc_init>
    timer0_init_ctc();
 568:	0e 94 89 00 	call	0x112	; 0x112 <timer0_init_ctc>

    sei(); // Глобальне увімкнення переривань
 56c:	78 94       	sei
	UART_send_str("System ready.\r\n");
 56e:	8c ee       	ldi	r24, 0xEC	; 236
 570:	90 e0       	ldi	r25, 0x00	; 0
 572:	0e 94 55 00 	call	0xaa	; 0xaa <UART_send_str>

    Command_parser(); // Основний цикл
 576:	0e 94 b8 00 	call	0x170	; 0x170 <Command_parser>
}
 57a:	80 e0       	ldi	r24, 0x00	; 0
 57c:	90 e0       	ldi	r25, 0x00	; 0
 57e:	08 95       	ret

00000580 <strcmp>:
 580:	fb 01       	movw	r30, r22
 582:	dc 01       	movw	r26, r24
 584:	8d 91       	ld	r24, X+
 586:	01 90       	ld	r0, Z+
 588:	80 19       	sub	r24, r0
 58a:	01 10       	cpse	r0, r1
 58c:	d9 f3       	breq	.-10     	; 0x584 <strcmp+0x4>
 58e:	99 0b       	sbc	r25, r25
 590:	08 95       	ret

00000592 <itoa>:
 592:	fb 01       	movw	r30, r22
 594:	9f 01       	movw	r18, r30
 596:	e8 94       	clt
 598:	42 30       	cpi	r20, 0x02	; 2
 59a:	c4 f0       	brlt	.+48     	; 0x5cc <itoa+0x3a>
 59c:	45 32       	cpi	r20, 0x25	; 37
 59e:	b4 f4       	brge	.+44     	; 0x5cc <itoa+0x3a>
 5a0:	4a 30       	cpi	r20, 0x0A	; 10
 5a2:	29 f4       	brne	.+10     	; 0x5ae <itoa+0x1c>
 5a4:	97 fb       	bst	r25, 7
 5a6:	1e f4       	brtc	.+6      	; 0x5ae <itoa+0x1c>
 5a8:	90 95       	com	r25
 5aa:	81 95       	neg	r24
 5ac:	9f 4f       	sbci	r25, 0xFF	; 255
 5ae:	64 2f       	mov	r22, r20
 5b0:	77 27       	eor	r23, r23
 5b2:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <__udivmodhi4>
 5b6:	80 5d       	subi	r24, 0xD0	; 208
 5b8:	8a 33       	cpi	r24, 0x3A	; 58
 5ba:	0c f0       	brlt	.+2      	; 0x5be <itoa+0x2c>
 5bc:	89 5d       	subi	r24, 0xD9	; 217
 5be:	81 93       	st	Z+, r24
 5c0:	cb 01       	movw	r24, r22
 5c2:	00 97       	sbiw	r24, 0x00	; 0
 5c4:	a1 f7       	brne	.-24     	; 0x5ae <itoa+0x1c>
 5c6:	16 f4       	brtc	.+4      	; 0x5cc <itoa+0x3a>
 5c8:	5d e2       	ldi	r21, 0x2D	; 45
 5ca:	51 93       	st	Z+, r21
 5cc:	10 82       	st	Z, r1
 5ce:	c9 01       	movw	r24, r18
 5d0:	0c 94 ea 02 	jmp	0x5d4	; 0x5d4 <strrev>

000005d4 <strrev>:
 5d4:	dc 01       	movw	r26, r24
 5d6:	fc 01       	movw	r30, r24
 5d8:	67 2f       	mov	r22, r23
 5da:	71 91       	ld	r23, Z+
 5dc:	77 23       	and	r23, r23
 5de:	e1 f7       	brne	.-8      	; 0x5d8 <strrev+0x4>
 5e0:	32 97       	sbiw	r30, 0x02	; 2
 5e2:	04 c0       	rjmp	.+8      	; 0x5ec <strrev+0x18>
 5e4:	7c 91       	ld	r23, X
 5e6:	6d 93       	st	X+, r22
 5e8:	70 83       	st	Z, r23
 5ea:	62 91       	ld	r22, -Z
 5ec:	ae 17       	cp	r26, r30
 5ee:	bf 07       	cpc	r27, r31
 5f0:	c8 f3       	brcs	.-14     	; 0x5e4 <strrev+0x10>
 5f2:	08 95       	ret

000005f4 <__udivmodhi4>:
 5f4:	aa 1b       	sub	r26, r26
 5f6:	bb 1b       	sub	r27, r27
 5f8:	51 e1       	ldi	r21, 0x11	; 17
 5fa:	07 c0       	rjmp	.+14     	; 0x60a <__udivmodhi4_ep>

000005fc <__udivmodhi4_loop>:
 5fc:	aa 1f       	adc	r26, r26
 5fe:	bb 1f       	adc	r27, r27
 600:	a6 17       	cp	r26, r22
 602:	b7 07       	cpc	r27, r23
 604:	10 f0       	brcs	.+4      	; 0x60a <__udivmodhi4_ep>
 606:	a6 1b       	sub	r26, r22
 608:	b7 0b       	sbc	r27, r23

0000060a <__udivmodhi4_ep>:
 60a:	88 1f       	adc	r24, r24
 60c:	99 1f       	adc	r25, r25
 60e:	5a 95       	dec	r21
 610:	a9 f7       	brne	.-22     	; 0x5fc <__udivmodhi4_loop>
 612:	80 95       	com	r24
 614:	90 95       	com	r25
 616:	bc 01       	movw	r22, r24
 618:	cd 01       	movw	r24, r26
 61a:	08 95       	ret

0000061c <_exit>:
 61c:	f8 94       	cli

0000061e <__stop_program>:
 61e:	ff cf       	rjmp	.-2      	; 0x61e <__stop_program>
